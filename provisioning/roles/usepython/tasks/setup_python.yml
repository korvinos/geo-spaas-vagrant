---
#usepython\tasks\setup_python.yml
- name: Download Miniconda
  get_url:
    url: http://repo.continuum.io/miniconda/Miniconda-latest-Linux-x86_64.sh
    dest: "{{ cache_dir }}/miniconda.sh"

- name: chmod Miniconda
  file: path="{{ cache_dir }}/miniconda.sh" mode=775

- name: Install Miniconda
  shell: '{{ cache_dir }}/miniconda.sh -b -p {{ conda_dir }}'
  args:
    creates: '{{ conda_dir }}'

- name: Create conda_pkgs in shared folder
  file: path="{{ cache_dir }}/conda_pkgs/empty" state=directory
  when: use_conda_cache is defined and use_conda_cache

- name: Copy cached packages from conda_pkgs
  shell: 'cp {{ cache_dir }}/conda_pkgs/* {{ conda_dir }}/pkgs/ -r'
  when: use_conda_cache is defined and use_conda_cache

- name: Update Miniconda
  shell: 'conda update -q --yes --copy conda'

- name: Install Nansat requirements
  shell: 'conda install -q --yes --copy {{ item }}'
  with_items:
    scipy
    matplotlib
    nose
    pillow
    pyproj
    basemap
    netcdf4

- name: Install Nansencloud requirements
  shell: 'conda install -q --yes --copy {{ item }}'
  with_items:
    django
    scikit-learn
    coverage
    jupyter
  when: setup_nansen_cloud is defined and setup_nansen_cloud
#Note: jupyter installs "certifi" which breaks the ssl-certificate verification, so that conda partially breaks (at least on centos)
#- need to disable checking certificates for now - FIX THIS (task "fixing certifi breaking things")

- name: Instal nansat-gdal and all requirements
  shell: 'conda install -q --yes --copy -c nersc nansat-gdal'

- name: Install nansen-cloud requirements
  pip: name={{ item }}
  with_items:
    - django-forms-bootstrap
    - django-leaflet
    - ipdb
  when: setup_nansen_cloud is defined and setup_nansen_cloud

- name: Clone pysqlite
  git: repo=https://github.com/ghaering/pysqlite
       dest="{{ ansible_env.HOME }}/pysqlite/"
       version=da389878e7c0623cf188387b9fce4fc77d0a9b2c
       update=no
  register: git_pysqlite
  when: setup_nansen_cloud is defined and setup_nansen_cloud and use_local_database is defined and use_local_database

- name: Install pysqlite
  shell: 'python setup.py install'
  args:
    chdir: "{{ ansible_env.HOME }}/pysqlite/"
  when: git_pysqlite.changed
  when: setup_nansen_cloud is defined and setup_nansen_cloud and use_local_database is defined and use_local_database

- name: Copy downloaded packages to cached conda_pkgs
  shell: 'cp {{ conda_dir }}/pkgs/*.[bt][zx][2t] {{ cache_dir }}/conda_pkgs/'
  when: use_conda_cache is defined and use_conda_cache

- name: Add PATH to .bashrc
  lineinfile: dest=/home/vagrant/.bashrc line="export PATH={{ conda_dir }}/bin:$PATH"

- name: Add GDAL_DATA to .bashrc
  lineinfile: dest=/home/vagrant/.bashrc line="export GDAL_DATA={{ conda_dir }}/share/gdal"

- name: Add links to some conda libraries to /usr/lib
  sudo: yes
  file: src="{{ conda_dir }}/lib/{{ item }}" dest="/usr/lib/{{ item }}" state=link
  with_items:
    - libgeos_c.so
    - libgdal.so

- name: Run ldconfig
  sudo: yes
  shell: 'ldconfig'

- name: Update/checkout Nansat
  git: repo=https://github.com/nansencenter/nansat
       dest="{{ dev_sources_dir }}/nansat/"
       version="{{ nansat_version }}"
       update=yes
  register: git_nansat

- name: Install Nansat (always run to keep the pixel functions updated)
  shell: 'python setup.py build_ext --inplace'
  args:
    chdir: '{{ dev_sources_dir }}/nansat'

- name: Create link from Python dist-packages to nansat
  file: path='{{ python_dist_packages }}/nansat'
        src='{{ dev_sources_dir }}/nansat/nansat'
        state=link
        force=yes

- name: Update/checkout Nansen-Cloud Django
  git: repo=https://github.com/nansencenter/nansen-cloud
       dest="{{ install_dir }}/nansen-cloud"
       version="{{ nansencloud_version }}"
       update=yes
       force=yes
  when: setup_nansen_cloud is defined and setup_nansen_cloud
  tags: 
    - update-nansencloud


- name: Override the settings.py file
  template: src=settings.py
            dest={{ project_path }}/project/settings.py
            backup=yes
  tags: 
    - update-nansencloud
  when: setup_nansen_cloud is defined and setup_nansen_cloud

- name: Create link from Python dist-packages to nansen-cloud
  file: path='{{ python_dist_packages }}/nansencloud'
        src='{{ install_dir }}/nansen-cloud/nansencloud'
        state=link
        force=yes
  when: setup_nansen_cloud is defined and setup_nansen_cloud
